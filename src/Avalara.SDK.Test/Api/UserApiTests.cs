/*
 Avalara API Client Library
 * Avalara Shipping Verification for Beverage Alcohol
 *
 * API for evaluating transactions against direct-to-consumer Beverage Alcohol shipping regulations.  This API is currently in beta. 
 *
 * The version of SDK  : 22.1.0
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Avalara.SDK.Client;
using Avalara.SDK.Api;
using Avalara.SDK.Helpers;
using Avalara.SDK.Model.IAMDS;
// uncomment below to import models
//using Avalara.SDK.Model;

namespace Avalara.SDK.Test.Api
{
    /// <summary>
    ///  Class for testing ShippingVerificationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UserApiTests : IDisposable
    {
        private SDK.Api.IAMDS.UserApi instance;
        private ApiClient apiclient;
        public UserApiTests()
        {
            var root = Directory.GetCurrentDirectory();
            var basePath = root.Split("\\src\\")[0];
            var dotenv = Path.Combine(basePath, ".env");
            DotEnv.Load(dotenv);
            Configuration configuration = new Configuration();
            configuration.Environment = AvalaraEnvironment.Test;
            configuration.ClientID = Environment.GetEnvironmentVariable("CLIENT_ID");
            configuration.ClientSecret = Environment.GetEnvironmentVariable("CLIENT_SECRET");
            
            configuration.AppName = "Test";
            configuration.AppVersion = "1.0";
            configuration.MachineName = "LocalBox";
            configuration.TestTokenURL = "https://dev-75323271.okta.com/oauth2/default/v1/token";
            configuration.TestBasePath = "https://localhost:3000";

            apiclient = new ApiClient(configuration);

            instance = new SDK.Api.IAMDS.UserApi(apiclient);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ShippingVerificationApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<SDK.Api.IAMDS.UserApi>(instance);
        }

        /// <summary>
        /// Test DeregisterShipment
        /// </summary>
        [Fact]
        public void CreateUserTest()
        {
            Reference org = new Reference("AVL", "Avalara");
            List<object> emails = new List<object>();
            User user = new User(null, "testUser", org, null, "Joe", null, null, null, null, null, null, null, true, null, emails);
            Guid guid = Guid.NewGuid();
            try
            {
                instance.CreateUser("1.2.3", guid.ToString(), user);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            try
            {
                instance.CreateUser("1.2.3", guid.ToString(), user);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            try
            {
                instance.ListUsers();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }
}